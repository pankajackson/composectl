# Reference: https://gethomepage.dev/installation/docker/#using-environment-secrets

services:
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    volumes:
      - ./config/bookmarks.yaml:/app/config/bookmarks.yaml
      - ./config/services.yaml:/app/config/services.yaml
      - ./config/settings.yaml:/app/config/settings.yaml
      - ./config/widgets.yaml:/app/config/widgets.yaml
      - ./config/docker.yaml:/app/config/docker.yaml
      - ./config/kubernetes.yaml:/app/config/kubernetes.yaml
      - /opt/storage/homepage/config:/app/config # Make sure your local config directory exists
      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations, see alternative methods
    environment:
      PUID: 0
      PGID: 0
    networks:
      - secure-network
    labels:
      # Local insecure mode
      - "traefik.enable=true"
      - "traefik.http.routers.homepage-http.rule=Host(`home.lxa.com`)"
      - "traefik.http.routers.homepage-http.entrypoints=web"

      # HTTP Router for home.linuxastra.in (Redirect to HTTPS)
      - "traefik.http.routers.homepage-http-redirect.rule=Host(`home.linuxastra.in`)"
      - "traefik.http.routers.homepage-http-redirect.entrypoints=web"
      - "traefik.http.routers.homepage-http-redirect.middlewares=https-redirect"

      # HTTPS Router for home.linuxastra.in (No redirect, just serve traffic)
      - "traefik.http.routers.homepage-https.rule=Host(`home.linuxastra.in`)"
      - "traefik.http.routers.homepage-https.entrypoints=websecure"
      - "traefik.http.routers.homepage-https.tls=true"
      - "traefik.http.routers.homepage-https.tls.certresolver=letsencrypt"
      - "traefik.http.routers.homepage-https.middlewares=authentik@file"

      # Middleware for redirecting HTTP to HTTPS
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
    restart: unless-stopped

networks:
  secure-network:
    external: true
    name: ${CONTAINER_NETWORK}
